# Alternative GNU Make project makefile autogenerated by Premake

ifndef config
  config=debug
endif

ifndef verbose
  SILENT = @
endif

.PHONY: clean prebuild

SHELLTYPE := posix
ifeq (.exe,$(findstring .exe,$(ComSpec)))
	SHELLTYPE := msdos
endif

# Configurations
# #############################################

TARGETDIR = ../bin/windows/x86_64/Application
TARGET = $(TARGETDIR)/Application.lib
DEFINES += /D"_UNICODE" /D"UNICODE" /D"WINDOWS"
INCLUDES += -I../Include -I../Include/vulkan -I../Renderer/Source
FORCE_INCLUDE +=
ALL_CPPFLAGS += $(CPPFLAGS) $(DEFINES) $(INCLUDES)
ALL_RESFLAGS += $(RESFLAGS) $(DEFINES) $(INCLUDES)
LIBS += ../bin/windows/x86_64/Renderer/Renderer.lib vulkan-1.lib glfw3.lib
LDDEPS += ../bin/windows/x86_64/Renderer/Renderer.lib
ALL_LDFLAGS += $(LDFLAGS) /LIBPATH:"../Libs" /NOLOGO
LINKCMD = $(AR) -rcs "$@" $(OBJECTS)
define PREBUILDCMDS
endef
define PRELINKCMDS
endef
define POSTBUILDCMDS
endef

ifeq ($(config),debug)
OBJDIR = ../bin-int/windows/x86_64/Application/Debug
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) /MDd /Z7
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) /MDd /Z7 /EHsc

else ifeq ($(config),release)
OBJDIR = ../bin-int/windows/x86_64/Application/Release
ALL_CFLAGS += $(CFLAGS) $(ALL_CPPFLAGS) /Ot /MT
ALL_CXXFLAGS += $(CXXFLAGS) $(ALL_CPPFLAGS) /Ot /MT /EHsc

endif

# Per File Configurations
# #############################################

PERFILE_FLAGS_0 = $(ALL_CXXFLAGS) /MD /D"_UNICODE" /D"UNICODE"

# File sets
# #############################################

GENERATED :=
OBJECTS :=

GENERATED += $(OBJDIR)/AppCore.o
GENERATED += $(OBJDIR)/AppTime.o
GENERATED += $(OBJDIR)/Application.o
GENERATED += $(OBJDIR)/AssetManager.o
GENERATED += $(OBJDIR)/Collider.o
GENERATED += $(OBJDIR)/DLLLoading.o
GENERATED += $(OBJDIR)/Entity.o
GENERATED += $(OBJDIR)/Event.o
GENERATED += $(OBJDIR)/InputSystem.o
GENERATED += $(OBJDIR)/Layer.o
GENERATED += $(OBJDIR)/LogSystem.o
GENERATED += $(OBJDIR)/RandomGenerator.o
GENERATED += $(OBJDIR)/Serializer.o
GENERATED += $(OBJDIR)/Window.o
OBJECTS += $(OBJDIR)/AppCore.o
OBJECTS += $(OBJDIR)/AppTime.o
OBJECTS += $(OBJDIR)/Application.o
OBJECTS += $(OBJDIR)/AssetManager.o
OBJECTS += $(OBJDIR)/Collider.o
OBJECTS += $(OBJDIR)/DLLLoading.o
OBJECTS += $(OBJDIR)/Entity.o
OBJECTS += $(OBJDIR)/Event.o
OBJECTS += $(OBJDIR)/InputSystem.o
OBJECTS += $(OBJDIR)/Layer.o
OBJECTS += $(OBJDIR)/LogSystem.o
OBJECTS += $(OBJDIR)/RandomGenerator.o
OBJECTS += $(OBJDIR)/Serializer.o
OBJECTS += $(OBJDIR)/Window.o

# Rules
# #############################################

all: $(TARGET)
	@:

$(TARGET): $(GENERATED) $(OBJECTS) $(LDDEPS) | $(TARGETDIR)
	$(PRELINKCMDS)
	@echo Linking Application
	$(SILENT) $(LINKCMD)
	$(POSTBUILDCMDS)

$(TARGETDIR):
	@echo Creating $(TARGETDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(TARGETDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(TARGETDIR))
endif

$(OBJDIR):
	@echo Creating $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) mkdir -p $(OBJDIR)
else
	$(SILENT) mkdir $(subst /,\\,$(OBJDIR))
endif

clean:
	@echo Cleaning Application
ifeq (posix,$(SHELLTYPE))
	$(SILENT) rm -f  $(TARGET)
	$(SILENT) rm -rf $(GENERATED)
	$(SILENT) rm -rf $(OBJDIR)
else
	$(SILENT) if exist $(subst /,\\,$(TARGET)) del $(subst /,\\,$(TARGET))
	$(SILENT) if exist $(subst /,\\,$(GENERATED)) del /s /q $(subst /,\\,$(GENERATED))
	$(SILENT) if exist $(subst /,\\,$(OBJDIR)) rmdir /s /q $(subst /,\\,$(OBJDIR))
endif

prebuild: | $(OBJDIR)
	$(PREBUILDCMDS)

ifneq (,$(PCH))
$(OBJECTS): $(GCH) | $(PCH_PLACEHOLDER)
$(GCH): $(PCH) | prebuild
	@echo $(notdir $<)
	$(SILENT) $(CXX) -x c++-header $(ALL_CXXFLAGS) -o "$@" -MF "$(@:%.gch=%.d)" -c "$<"
$(PCH_PLACEHOLDER): $(GCH) | $(OBJDIR)
ifeq (posix,$(SHELLTYPE))
	$(SILENT) touch "$@"
else
	$(SILENT) echo $null >> "$@"
endif
else
$(OBJECTS): | prebuild
endif


# File Rules
# #############################################

$(OBJDIR)/AppCore.o: Source/AppCore.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/AppTime.o: Source/AppTime.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Application.o: Source/Application.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/AssetManager.o: Source/AssetManager.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Collider.o: Source/Collider.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/DLLLoading.o: Source/DLLLoading.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Entity.o: Source/Entity.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Event.o: Source/Event.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/InputSystem.o: Source/InputSystem.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Layer.o: Source/Layer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/LogSystem.o: Source/LogSystem.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/RandomGenerator.o: Source/RandomGenerator.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Serializer.o: Source/Serializer.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"
$(OBJDIR)/Window.o: Source/Window.cpp
	@echo "$(notdir $<)"
	$(SILENT) $(CXX) $(PERFILE_FLAGS_0) $(FORCE_INCLUDE) -o "$@" -MF "$(@:%.o=%.d)" -c "$<"

-include $(OBJECTS:%.o=%.d)
ifneq (,$(PCH))
  -include $(PCH_PLACEHOLDER).d
endif